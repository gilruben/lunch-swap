'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var executeTransition = function executeTransition(history) {
  return function (transitionData) {
    if (transitionData) {
      var method = transitionData.replace ? 'replace' : 'push';
      history[method](transitionData);
    }
  };
};

exports.executeTransition = executeTransition;

exports['default'] = function (history, catchAllHandler) {
  return function (next) {
    return function (reducer, initialState) {
      var store = next(reducer, initialState);
      var finalExecuteTransition = executeTransition(history);

      return _extends({}, store, {
        dispatch: function dispatch(action) {
          var meta = action.meta;

          var transitionHandler = meta ? meta.transition || catchAllHandler : catchAllHandler;

          var prevState = transitionHandler && store.getState();

          store.dispatch(action);

          var nextState = transitionHandler && store.getState();

          var transitionData = undefined;

          if (transitionHandler) {
            if (typeof transitionHandler === 'object') {
              var error = action.error;
              var done = action.meta.done;

              var handler = 'begin';

              if (done) {
                handler = error ? 'failure' : 'success';
              }

              var func = transitionHandler[handler];
              if (func) {
                transitionData = func(prevState, nextState, action);
              }
            } else {
              transitionData = transitionHandler(prevState, nextState, action);
            }
          }

          if (transitionData) {
            if (typeof transitionData.then === 'function') {
              transitionData.then(finalExecuteTransition)['catch'](finalExecuteTransition);
            } else {
              finalExecuteTransition(transitionData);
            }
          }

          return action;
        }
      });
    };
  };
};